// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck

/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import {
  AssetInfo,
  PairType,
  Decimal,
  InstantiateMsg,
  PoolFee,
  Fee,
  ExecuteMsg,
  Uint128,
  Binary,
  Cw20ReceiveMsg,
  Asset,
  FeatureToggle,
  QueryMsg,
  MigrateMsg,
  ProtocolFeesResponse,
  Addr,
  Config,
  PairInfo,
  PoolResponse,
  ReverseSimulationResponse,
  SimulationResponse,
} from './TerraswapPair.types';
export interface TerraswapPairReadOnlyInterface {
  contractAddress: string;
  pair: () => Promise<PairInfo>;
  config: () => Promise<Config>;
  protocolFees: ({
    allTime,
    assetId,
  }: {
    allTime?: boolean;
    assetId?: string;
  }) => Promise<ProtocolFeesResponse>;
  burnedFees: ({
    assetId,
  }: {
    assetId?: string;
  }) => Promise<ProtocolFeesResponse>;
  pool: () => Promise<PoolResponse>;
  simulation: ({
    offerAsset,
  }: {
    offerAsset: Asset;
  }) => Promise<SimulationResponse>;
  reverseSimulation: ({
    askAsset,
  }: {
    askAsset: Asset;
  }) => Promise<ReverseSimulationResponse>;
}
export class TerraswapPairQueryClient
  implements TerraswapPairReadOnlyInterface
{
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.pair = this.pair.bind(this);
    this.config = this.config.bind(this);
    this.protocolFees = this.protocolFees.bind(this);
    this.burnedFees = this.burnedFees.bind(this);
    this.pool = this.pool.bind(this);
    this.simulation = this.simulation.bind(this);
    this.reverseSimulation = this.reverseSimulation.bind(this);
  }

  pair = async (): Promise<PairInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pair: {},
    });
  };
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    });
  };
  protocolFees = async ({
    allTime,
    assetId,
  }: {
    allTime?: boolean;
    assetId?: string;
  }): Promise<ProtocolFeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      protocol_fees: {
        all_time: allTime,
        asset_id: assetId,
      },
    });
  };
  burnedFees = async ({
    assetId,
  }: {
    assetId?: string;
  }): Promise<ProtocolFeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      burned_fees: {
        asset_id: assetId,
      },
    });
  };
  pool = async (): Promise<PoolResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pool: {},
    });
  };
  simulation = async ({
    offerAsset,
  }: {
    offerAsset: Asset;
  }): Promise<SimulationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulation: {
        offer_asset: offerAsset,
      },
    });
  };
  reverseSimulation = async ({
    askAsset,
  }: {
    askAsset: Asset;
  }): Promise<ReverseSimulationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reverse_simulation: {
        ask_asset: askAsset,
      },
    });
  };
}
export interface TerraswapPairInterface extends TerraswapPairReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  provideLiquidity: (
    {
      assets,
      receiver,
      slippageTolerance,
    }: {
      assets: Asset[];
      receiver?: string;
      slippageTolerance?: Decimal;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  withdrawLiquidity: (
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  swap: (
    {
      beliefPrice,
      maxSpread,
      offerAsset,
      to,
    }: {
      beliefPrice?: Decimal;
      maxSpread?: Decimal;
      offerAsset: Asset;
      to?: string;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateConfig: (
    {
      featureToggle,
      feeCollectorAddr,
      owner,
      poolFees,
    }: {
      featureToggle?: FeatureToggle;
      feeCollectorAddr?: string;
      owner?: string;
      poolFees?: PoolFee;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  collectProtocolFees: (
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class TerraswapPairClient
  extends TerraswapPairQueryClient
  implements TerraswapPairInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.provideLiquidity = this.provideLiquidity.bind(this);
    this.withdrawLiquidity = this.withdrawLiquidity.bind(this);
    this.swap = this.swap.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.collectProtocolFees = this.collectProtocolFees.bind(this);
  }

  receive = async (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {
          amount,
          msg,
          sender,
        },
      },
      fee,
      memo,
      funds
    );
  };
  provideLiquidity = async (
    {
      assets,
      receiver,
      slippageTolerance,
    }: {
      assets: Asset[];
      receiver?: string;
      slippageTolerance?: Decimal;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        provide_liquidity: {
          assets,
          receiver,
          slippage_tolerance: slippageTolerance,
        },
      },
      fee,
      memo,
      funds
    );
  };
  withdrawLiquidity = async (
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw_liquidity: {},
      },
      fee,
      memo,
      funds
    );
  };
  swap = async (
    {
      beliefPrice,
      maxSpread,
      offerAsset,
      to,
    }: {
      beliefPrice?: Decimal;
      maxSpread?: Decimal;
      offerAsset: Asset;
      to?: string;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        swap: {
          belief_price: beliefPrice,
          max_spread: maxSpread,
          offer_asset: offerAsset,
          to,
        },
      },
      fee,
      memo,
      funds
    );
  };
  updateConfig = async (
    {
      featureToggle,
      feeCollectorAddr,
      owner,
      poolFees,
    }: {
      featureToggle?: FeatureToggle;
      feeCollectorAddr?: string;
      owner?: string;
      poolFees?: PoolFee;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          feature_toggle: featureToggle,
          fee_collector_addr: feeCollectorAddr,
          owner,
          pool_fees: poolFees,
        },
      },
      fee,
      memo,
      funds
    );
  };
  collectProtocolFees = async (
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        collect_protocol_fees: {},
      },
      fee,
      memo,
      funds
    );
  };
}
